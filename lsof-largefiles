#!/usr/bin/perl -w

# Wed May 30 11:22:58 BST 2012
(my $email='XXX%YYY,ch')=~ tr/%,/@./;

use strict;
#use warnings FATAL => 'uninitialized';

$0=~ /(.*?)([^\/]+)\z/s or die "?";
my ($mydir, $myname)=($1,$2);
sub usage {
    print STDERR map{"$_\n"} @_ if @_;
    print "$myname

  (Christian Jaeger <$email>)
";
exit (@_ ? 1 : 0);
}

use Getopt::Long;
our $verbose=0;
#our $opt_dry;
GetOptions("verbose"=> \$verbose,
           "help"=> sub{usage},
           #"dry-run"=> \$opt_dry,
           ) or exit 1;
usage if @ARGV;


use Data::Dumper;
use Chj::callcc2;
use Chj::Parse::Lsof 'readlsof';
use Chj::IO::Command;
use Chj::CallccLib 'xref';
use Chj::Util qw(Sort_table On $noop);

our $files; # those we are interested in; path => size

our $show_f= sub {
    my ($rec)=@_;
    #print Dumper($rec);
    #push @{$$files{ $$rec{n} }}, $rec;
    callcc sub {
        my ($exit)=@_;
        my $entry= [ xref($rec,'s',$exit), xref($rec,'_p',$exit) ];
        push @{$$files{ $$rec{n} }}, $entry;
    };
};

our $treat_f_type=
  +{
    # dir handles
    #cwd=> $noop,
    #rtd=> $noop,
    #not reached anyway.

    # file handles
    mem=> $show_f,
    DEL=> $show_f,
    txt=> $noop, # too small, or constant anyway, not interesting
   };

our $treat_fd= $show_f;

readlsof ["-n"], sub {
    my ($rec)= @_;
    my $t= $$rec{t};
    if ($t eq 'CHR'
        or $t eq 'DIR'
        or $t eq 'unix'
        or $t eq 'sock'
        or $t eq '0000' # 'n' => 'anon_inode',  in process 'udevd'
        or $t eq 'FIFO'
        or $t eq 'IPv4'
        or $t eq 'IPv6'
        or $t eq 'raw6'
        or $t eq 'pack' # 'n' => 'type=SOCK_PACKET', in process 'dhclient'
        or $t eq 'netlink'
        or $t eq 'a_inode' # [eventpoll], [signalfd], inotify, [timerfd],
                           # in systemd, dbus-daemon and ModemManager processes
       ) {
        # ignore
    } elsif ($t eq 'REG') {
        # fd numbers used if not special kind.
        # (well. makes sense.)
        my $f= $$rec{f};
        if ($f=~ /^\d+\z/s) {
            &$treat_fd($rec);
        } else {
            if ($$rec{n}=~ m{^(?:/usr)?/lib/.*?[^/]\.(so|jar|ja)\b}) {
                # why, oh why, are those now REG files not, well,
                # dunno what it was? Anyway we've got some *large* .so
                # files nowadays, so, ignore them to see what's
                # relevant, OK? XX should probably rather simply
                # ignore files that are opened read-only.
            } else {
                my $treat= $$treat_f_type{$f}
                  or die "unknown value '$f' for field 'f'";
                &$treat($rec);
            }
        }
    } elsif ($t eq 'unknown') {
        if ($$rec{f} eq 'txt' and $$rec{n} =~ m|^/proc/|) {
            # ignore
        } else {
            warn "unknown: ".Dumper($rec)." ";
        }
    } else {
        die "unknown file type '$t' in: ".Dumper($rec)." ";
        # add new types to ignore at the top, near 'CHR'!
    }
};


# sort by size in last entry of each path:
our $cmp_size_lastentry=
  On(sub {
         my ($ab)=@_;
         # last entry, first field
         $$ab[-1][0]
     },
     sub {
         my ($a_,$b_)=@_;
         $b_ <=> $a_
     });

my $out= Chj::IO::Command->new_receiver("less");

for (@{Sort_table $files, $cmp_size_lastentry}) {
    #warn "got ".Dumper($_);
    my ($path, $size_and_process__records)=@$_;
    my $size= $$size_and_process__records[-1][0];
    $out->xprintln($size, " ", $path);
    for (@$size_and_process__records) {
        my ($size,$process)=@$_;
        $out->xprintln("  ", join(" ",map { defined $_ ? $_ : "(undef)" }
                                  @$process{'p','L','c'}));
    }
}

$out->xfinish;

#use Chj::ruse;
#use Chj::Backtrace; use Chj::repl; repl;
