#!/usr/bin/perl -wT

use strict;

sub usage {
    my $err=@_;
    my $fh= $err ? *STDERR{IO} : *STDOUT{IO};
    if ($err) {
	print $fh @_,"\n";
    }
    print $fh <<'END';
Usage:
    loc [-i] [-F] description_of_file
or  loc [-i] [-F] -d description_of_folder
or  loc [-i] [-F] [-d] description -e[i] exclude_desc
or  loc [-i] [-F] [-d] description -ee[i] exclude_desc_on_whole_path

With the -d option, only folders are searched, else only files.

The description is a [perl or mlocate] style regular expression, or a
literal part of the file/folder name if the -F option is given.

In both cases, only the name of the file/folder is searched, not
any other part of the path of the file. And you can specify the
whole file name this way:
    loc '^myfile\.txt$'

If you specify the -i option, the search (!) is case insensitive. (This
does not touch the exclude pattern - see below.)
(The -F flag affects both the search and exclude patterns, though,
curently.)

Finally, you can give an 'exclude' description. File/folder names
matching this description are NOT displayed. If you specify -ee, the
whole file path is checked, -e only checks the item name. If you want
the exclusion terms to be case insensitive, specify the i option
after the e in the -e options.

LIMITATIONS:  handling of search patterns is not complete. For example
you may NOT use the 'or' syntax (like in '(some)|(other)'). Read the
first printed line to see what's being done. (This does not concern
exclusion patterns.)

This is a wrapper around either 'locate' or 'mlocate', in the former
case filtering the output with perl, in the latter using mlocate's
abilities directly.

Further options:
 -w | --whole-path  match the pattern against the whole path instead
                    of only against the basename

END
    exit($err ? 1 : 0);
}

our $loc='loc'; #name of this
our $locate;
our $have_mlocate;
if (-f "/usr/bin/mlocate") {
    $have_mlocate=1;
    $locate= "/usr/bin/mlocate";
} else {
    $have_mlocate=0;
    $locate= '/usr/bin/locate';
}


usage unless @ARGV;

our ($folders,$insensitive,$desc,$exclude,$excludep,$exinsensitive,$exmatch,$opt_F);
our $opt_wholepath;

foreach (@ARGV) {
    if ($_ eq '--help' or $_ eq '-h') {
	usage
    }
    if (/^-[fd]$/) {
	$folders=1;
	next
    }
    if (/^-i$/) {
	$insensitive=1;
	next
    }
    if (/^-F$/) {
	$opt_F=1;
	next
    }
    if (/^--?w(?:hole(?:-path)?)?$/) {
	$opt_wholepath=1;
	next
    }
    unless (defined $desc) {
	$desc = $_;
	next
    }
    if (/^-e(e?)(i?)$/) {
	$exclude=1;
	$excludep=$1;
	$exinsensitive=$2;
	next
    }
    if ($exclude) {
	$exmatch = $_;
	next
    }
    usage "too many arguments or wrong options.\n";
}

die "$loc: missing exclusion pattern\n"
  if $exclude and not defined $exmatch;

sub detaint ( $ ) {
    my ($str)=@_;
    $str=~ /^(.*)\z/s;
    $1
}

if ($have_mlocate) {
    die "exclude with mlocate not implemented yet" if $exclude;
    die "folders with mlocate not implemented yet" if $folders;#uh
    my @cmd= ($locate,
	      ($opt_wholepath ? () : "--basename"),
	      ($insensitive ? "-i" : ()),
	      ($opt_F ? () : "-r"),
	      detaint($desc));
    delete $ENV{PATH};delete $ENV{BASH_ENV};delete $ENV{ENV};
    exec @cmd
      or die "could not exec $locate: $!";
} else {
    # go on with locate and perl below..
    die "\$opt_wholepath not supported in locate-using mode [yet]" if $opt_wholepath;
}

our $match;

if (not $opt_F) {  # a pattern is given
    # 1. First, extract the longest part of the pattern without meta chars
    my $p = $desc;
    # a) 'erase' [] parts 'cause these parts are not contiguous
    $p=~ s/(?<!\\)\[.*?(?<!\\)\]/./g;
    ##print "Vorher: '$desc'; Nach Lookbehindundso replace: '$p'\n";
    #    and also () parts since they are too complicated ...:
    $p=~ s/(?<!\\)\(.*?(?<!\\)\)/./g;

    # b) look for longest match
    $match='';
    my $maxlen=0;
    $p=~ s| (?: [^\^\[\]\*\$\.\\]*  (?:\\[\^\[\]\*\$\.])?)+ |
      # '?':
      #my $a=$&;   aber wie soll ich mpe?g richtig behandeln? quatsch. 23.12.00

      ##print "Nonmetamatch: '$&'\n";
      if (length($&)>$maxlen) {
	  $maxlen= length($&);
	  $match=$&;
      }
    |exg;
    ##print "Longest match is: $match\n";
    $match=~ s/\\//g;

} else {  # literal
    $match = $desc;      # locate this
    $desc= quotemeta($desc);
}

if ($insensitive) {
    $match=~ s|[a-zA-Z]|'['.lc($&).uc($&).']'|eg
      #^the only way to tell locate to be insensitive?
      and $match = '*'.$match.'*';
    $desc= '(?i)'.$desc;
}

if ($exclude) {
    if ($opt_F) {
	$exmatch= quotemeta($exmatch);
    }
    if ($exinsensitive) {
	$exmatch= '(?i)'.$exmatch;
    }
    print STDERR "    (locate '$match', exclude '$exmatch' on ",do{
	$excludep and 'path' or 'item'
    },", filter '$desc')\n";
} else {
    print STDERR "    (locate '$match', filter '$desc')\n";
}

our ($fls,$fldrs,$n)=(0,0,0);
#^ for counting folders/files that are matching but not displayed
our ($nnn,$nn)=(0,0);

$match=~ /(^[^']*$)/
  or die "Embedded \"'\" not yet supported.\n";
our $smatch=$1;# (und schliesslich gebe das ja ich selber ein)

delete $ENV{PATH};delete $ENV{BASH_ENV};delete $ENV{ENV};
open LOC, "$locate '$smatch'|"
  or die "could not fork, $!";

while (<LOC>) {
    $nnn++;
    next if $excludep and /$exmatch/o;
    chomp;
    our $item = $_;
    # extract pure file name
    s|^.*/||;
    next if $exclude and not($excludep) and /$exmatch/o;
    $nn++;
    if (/$desc/o) {
	if (-d $item) {
	    if ($folders) {
		print $item,"\n";
	    } else {
		$n++
	    }
	    $fldrs++
	} else {
	    if ($folders) {
		$n++
	    } else {
		print $item,"\n";
	    }
	    $fls++
	}
    }
}

close LOC
    or do {
	if ($!) {
	    die "close: $!"
	}
	if ($? == 256) {
	    #ok
	} else {
	    die "loc ended with status $?"
	}
    };


if ($folders) {
    print STDERR ("    (Found also $n file"
		  .do{$n>1 and 's' or ''}
		  ." matching your description.)\n")
      if ($n);
} else {
    print STDERR ("    (Found also $n folder"
		  .do{$n>1 and 's' or ''}
		  ." matching your description. Use the -d option to display "
		  .do{$n>1 and 'them' or 'it'}.".)\n")
      if ($n);
}

