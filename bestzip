#!/usr/bin/perl -w

# Son Jun 17 00:38:23 CEST 2007
(my $email='ch%christianjaeger,ch')=~ tr/%,/@./;

use strict;

$0=~ /(.*?)([^\/]+)\z/s or die "?";
my ($mydir, $myname)=($1,$2);
sub usage {
    print STDERR map{"$_\n"} @_ if @_;
    print "$myname file(s)

  (Christian Jaeger <$email>)
";
exit (@_ ? 1 : 0);
}

my @args;
my $DEBUG=0;
for (my $i=0; $i<=$#ARGV; $i++) {
    local $_=$ARGV[$i];
    if (/^--?h(elp)?$/) {
    	usage
    } elsif ($_ eq '--') {
    	push @args, @ARGV[$i+1..$#ARGV];
    	last;
    } elsif (/^--?d(ebug)?$/) {
	$DEBUG=1;
    } elsif (/^-./) {
    	usage("Unknown option '$_'\n");
    } else {
    	push @args, $_
    }
}
usage unless @args;


use Chj::xperlfunc;

sub tryzip {
    my ($cmdPlus,$infile)=@_;
    my $outfile= $cmdPlus->($infile);
    [ $outfile, xstat($outfile)->size ]
}

our @cmdPlus=
  (
   sub {
       my ($infile)=@_;
       xxsystem "bzip2","-k",$infile;
       $infile.".bz2"
   },
   # the following must be LAST now because it unlinks the original file!:
   sub {
       my ($infile)=@_;
       xxsystem "gzip","--best",$infile;
       $infile.".gz"
   },
  );

for my $file (@args) {
    local our @out= map {
	tryzip $_,$file
    } @cmdPlus;
    # find the smallest
    @out= sort { $$a[1] <=> $$b[1] } @out;
    my $keep= shift @out;
    # unlink the rest:
    xunlink $$_[0] for @out;
}
